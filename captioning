import cv2
import numpy as np

model_path = "C:/Users/SOUMILI/Desktop/codesoft/yolov3 (1).weights"
config_path = "C:/Users/SOUMILI/Desktop/codesoft/yolov3 (3).cfg"
net = cv2.dnn.readNet(model_path, config_path)

classes = []
with open("C:/Users/SOUMILI/Desktop/codesoft/coco (2).names", "r") as f:
    classes = f.read().strip().split("\n")

image = cv2.imread("C:/Users/SOUMILI/Desktop/codesoft/photo_6177144303411903418_y.jpg")

blob = cv2.dnn.blobFromImage(image, 0.00392, (416, 416), (0, 0, 0), True, crop=False)
net.setInput(blob)
outs = net.forward(net.getUnconnectedOutLayersNames())

class_ids = []
confidences = []
boxes = []

for out in outs:
    for detection in out:
        scores = detection[5:]
        class_id = np.argmax(scores)
        confidence = scores[class_id]
        if confidence > 0.5:
            center_x = int(detection[0] * image.shape[1])
            center_y = int(detection[1] * image.shape[0])
            w = int(detection[2] * image.shape[1])
            h = int(detection[3] * image.shape[0])
            x = int(center_x - w / 2)
            y = int(center_y - h / 2)
            boxes.append([x, y, w, h])
            confidences.append(float(confidence))
            class_ids.append(class_id)

indexes = cv2.dnn.NMSBoxes(boxes, confidences, 0.5, 0.4)

font = cv2.FONT_HERSHEY_SIMPLEX
for i in range(len(boxes)):
    if i in indexes:
        x, y, w, h = boxes[i]
        label = str(classes[class_ids[i]])
        confidence = confidences[i]
        color = (0, 255, 0) 
        cv2.rectangle(image, (x, y), (x + w, y + h), color, 2)
        cv2.putText(image, f"{label} {confidence:.2f}", (x, y - 10), font, 0.5, color, 2)


cv2.imshow("Object Detection", image)
cv2.waitKey(0)
cv2.destroyAllWindows()