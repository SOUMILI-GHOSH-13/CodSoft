import tkinter as tk
from tkinter import messagebox
import random

class TicTacToe:
    def __init__(self, root):
        self.root = root
        self.root.title("Tic Tac Toe")

        self.human_player = "X"
        self.ai_player = "O"

        self.board = [" "]*9

        self.buttons = [tk.Button(root, text=" ", font=('normal', 20), width=5, height=2,
                                  command=lambda i=i: self.on_button_click(i)) for i in range(9)]

        for i, button in enumerate(self.buttons):
            row, col = divmod(i, 3)
            button.grid(row=row, column=col)

    def on_button_click(self, index):
        if self.board[index] == " ":
            self.board[index] = self.human_player
            self.buttons[index].config(text=self.human_player, state=tk.DISABLED)

            if self.check_winner(self.human_player):
                messagebox.showinfo("Tic Tac Toe", "You win!")
                self.reset_game()
            elif " " not in self.board:
                messagebox.showinfo("Tic Tac Toe", "It's a tie!")
                self.reset_game()
            else:
                self.ai_move()

    def ai_move(self):
        # AI move using Minimax with alpha-beta pruning
        best_score = float('-inf')
        best_move = None

        for move in range(9):
            if self.board[move] == " ":
                self.board[move] = self.ai_player
                score = self.minimax(self.board, 0, False, float('-inf'), float('inf'))
                self.board[move] = " "

                if score > best_score:
                    best_score = score
                    best_move = move

        if best_move is not None:
            self.board[best_move] = self.ai_player
            self.buttons[best_move].config(text=self.ai_player, state=tk.DISABLED)

            if self.check_winner(self.ai_player):
                messagebox.showinfo("Tic Tac Toe", "AI wins!")
                self.reset_game()
            elif " " not in self.board:
                messagebox.showinfo("Tic Tac Toe", "It's a tie!")
                self.reset_game()

    def minimax(self, board, depth, maximizing_player, alpha, beta):
        scores = {"X": -1, "O": 1, " ": 0}

        if self.check_winner(self.human_player):
            return scores[self.human_player]
        elif self.check_winner(self.ai_player):
            return scores[self.ai_player]
        elif " " not in board:
            return scores[" "]

        if maximizing_player:
            max_eval = float('-inf')
            for i in range(9):
                if board[i] == " ":
                    board[i] = self.ai_player
                    eval = self.minimax(board, depth+1, False, alpha, beta)
                    board[i] = " "
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break
            return max_eval
        else:
            min_eval = float('inf')
            for i in range(9):
                if board[i] == " ":
                    board[i] = self.human_player
                    eval = self.minimax(board, depth+1, True, alpha, beta)
                    board[i] = " "
                    min_eval = min(min_eval, eval)
                    beta = min(beta, eval)
                    if beta <= alpha:
                        break
            return min_eval

    def check_winner(self, player):
        for i in range(3):
            if self.board[i] == self.board[i + 3] == self.board[i + 6] == player:
                return True  # Check columns
            if self.board[i * 3] == self.board[i * 3 + 1] == self.board[i * 3 + 2] == player:
                return True  # Check rows
        if self.board[0] == self.board[4] == self.board[8] == player:
            return True  # Check main diagonal
        if self.board[2] == self.board[4] == self.board[6] == player:
            return True  # Check counter diagonal
        return False

    def reset_game(self):
        self.board = [" "]*9

        for button in self.buttons:
            button.config(text=" ", state=tk.NORMAL)

        if random.choice([True, False]):
            self.ai_move()


if __name__ == "__main__":
    root = tk.Tk()
    game = TicTacToe(root)
    root.mainloop()
